# homebrew
eval "$(/opt/homebrew/bin/brew shellenv)"

MY_NAME=$(uname -n)
DOTFILES_DIR=~/Develop/global

function brewpush {
    pushd $DOTFILES_DIR
    cd global-private
    git fetch
    git add .
    git commit -m "build: update"
    git push
    cd ../

    brew bundle dump --force --brews --cask --tap
    git fetch
    git add .
    git commit -m "build: update"
    git push
    popd
}

function brewpull {
    pushd $DOTFILES_DIR
    git pull --rebase --recurse-submodules
    brew bundle install
    brew bundle cleanup --force
    ./dart/bootstrap.sh
    ./node/bootstrap.sh
    ./gh/bootstrap.sh
    ./gem/bootstrap.sh
    popd
}

export HOMEBREW_BUNDLE_FILE=$DOTFILES_DIR/dotfiles/Brewfile
export HOMEBREW_BUNDLE_NO_LOCK=true
export HOMEBREW_CLEANUP_MAX_AGE_DAYS=30

# nvm
export NVM_DIR="$HOME/.nvm"
export NVM_BREW_DIR="$(brew --prefix)/opt/nvm"
[ -s "$NVM_BREW_DIR/nvm.sh" ] && \. "$NVM_BREW_DIR/nvm.sh" # This loads nvm

# rbenv
eval "$(rbenv init - zsh)"

# Java
export JAVA_HOME=/Applications/Android\ Studio.app/Contents/jbr/Contents/Home
# export JAVA_HOME=/opt/homebrew/opt/openjdk@11
export PATH="$JAVA_HOME/bin:$PATH"

# Flutter
export PATH="$PATH:$HOME/fvm/default/bin"
## brewでfvmをインストールしているが、依存しているdartではなくfvmのdartを使いたいので優先する
export PATH="$HOME/.pub-cache/bin:$PATH"

# Android
export ANDROID_SDK_ROOT="$HOME/Library/Android/sdk"
export ANDROID_HOME="$ANDROID_SDK_ROOT"
export PATH="$PATH:$HOME/Library/Android/sdk/platform-tools"
export PATH="$PATH:$ANDROID_SDK_ROOT/cmake/3.18.1/bin"

# fastlane
export PATH="$PATH:$HOME/.fastlane/bin"
export APP_STORE_CONNECT_API_KEY_PATH="$HOME/.private_keys/for_fastlane_api_key.json"
export SUPPLY_JSON_KEY="$HOME/.private_keys/kingu-garage-prod-ef004f8bf995.json"

# node
export PATH=$PATH:./node_modules/.bin

# alias
alias cat='bat'
alias f='open .'
alias x86='arch -x86_64 zsh'
alias ps='procs'
alias code='code-insiders'
alias beep='afplay /System/Library/Sounds/Ping.aiff'

## lsd https://github.com/Peltoche/lsd
alias ls='lsd -A --group-dirs=last'
alias ll='lsd -Ahl --total-size --group-dirs=last'
alias tree='lsd -A --tree --group-dirs=last'
alias lr='lsd -Ahl --total-size --tree --group-dirs=last'

# [Finderで開いてるディレクトリへcdするコマンド \- Qiita](https://qiita.com/ucan-lab/items/c4b3466f53eac6f1a8b7)
cdf() {
    target=$(osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)')
    if [ "$target" != "" ]; then
        cd "$target"
        pwd
    else
        echo 'No Finder window found' >&2
    fi
}

# zsh
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_REDUCE_BLANKS
setopt INC_APPEND_HISTORY

# gcloud
source "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"
source "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc"

# Chrome
export CHROME_EXECUTABLE=$HOME/Develop/global/dotfiles/google-chrome-unsafe.sh

# zoxide https://github.com/ajeetdsouza/zoxide
eval "$(zoxide init zsh)"

## [Completion]
## Completion scripts setup. Remove the following line to uninstall
[[ -f $HOME/.dart-cli-completion/zsh-config.zsh ]] && . $HOME/.dart-cli-completion/zsh-config.zsh || true
## [/Completion]

# GitHub Copilot
eval "$(gh copilot alias -- zsh)"

# ccache
export CCACHE_SLOPPINESS=clang_index_store,file_stat_matches,include_file_ctime,include_file_mtime,ivfsoverlay,pch_defines,modules,system_headers,time_macros
export CCACHE_FILECLONE=true
export CCACHE_DEPEND=true
export CCACHE_INODECACHE=true

export PATH="$PATH:/opt/homebrew/opt/ccache/libexec"

# go lang
export PATH="$PATH:$HOME/go/bin"

# GPG
export GPG_TTY=$(tty)

# direnv
eval "$(direnv hook zsh)"

# Rust
export PATH="$PATH:$HOME/.cargo/bin"

# Load private settings
if [ -f "$DOTFILES_DIR/global-private/dotfiles/private.sh" ]; then
    . "$DOTFILES_DIR/global-private/dotfiles/private.sh"
fi

# Gemini
export GEMINI_MODEL="gemini-2.5-flash"